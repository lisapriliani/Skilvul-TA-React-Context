{"ast":null,"code":"var _jsxFileName = \"D:\\\\SKILVUL\\\\netlify deploy\\\\Technical-Assigment-Skilvul\\\\16-React-Context\\\\counter-app-react-context\\\\src\\\\CountContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { createContext, useContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountContext = /*#__PURE__*/createContext();\n\nconst countReducer = (state, action) => {\n  switch (action.type) {\n    case \"increment\":\n      {\n        // code here\n        return {\n          count: state.count + 1\n        };\n      }\n\n    case \"decrement\":\n      {\n        // code here\n        return {\n          count: state.count - 1\n        };\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action.type}`);\n      }\n  }\n};\n\nconst CountProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // useReducer\n  const [state, dispatch] = React.useReducer(countReducer, {\n    count: 0\n  }); // Make variable `value` and assign state & dispatch\n\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(CountContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CountProvider, \"2CGfLNHHCu3V//t40LY8bCkLvpw=\");\n\n_c = CountProvider;\n\nconst useCount = () => {\n  _s2();\n\n  // fill the default value of useContext\n  const context = useContext(CountContext);\n\n  if (context === \"undefined\") {\n    throw new Error(\"useCount must be used within a CountProvider\");\n  }\n\n  return context;\n};\n\n_s2(useCount, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { CountProvider, useCount };\n\nvar _c;\n\n$RefreshReg$(_c, \"CountProvider\");","map":{"version":3,"sources":["D:/SKILVUL/netlify deploy/Technical-Assigment-Skilvul/16-React-Context/counter-app-react-context/src/CountContext.js"],"names":["React","createContext","useContext","useReducer","CountContext","countReducer","state","action","type","count","Error","CountProvider","children","dispatch","value","useCount","context"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,QAAsD,OAAtD;;AAEA,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;;AAEA,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AAAkB;AAChB;AACA,eAAO;AAAEC,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAvB,SAAP;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB;AACA,eAAO;AAAEA,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAvB,SAAP;AACD;;AACD;AAAS;AACP,cAAM,IAAIC,KAAJ,CAAW,0BAAyBH,MAAM,CAACC,IAAK,EAAhD,CAAN;AACD;AAXH;AAaD,CAdD;;AAgBA,MAAMG,aAAa,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtC;AACA,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBb,KAAK,CAACG,UAAN,CAAiBE,YAAjB,EAA+B;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAA/B,CAA1B,CAFsC,CAGtC;;AACA,QAAMK,KAAK,GAAG;AAAER,IAAAA,KAAF;AAASO,IAAAA;AAAT,GAAd;AAEA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEC,KAA9B;AAAA,cAAsCF;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAPD;;GAAMD,a;;KAAAA,a;;AASN,MAAMI,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA,QAAMC,OAAO,GAAGd,UAAU,CAACE,YAAD,CAA1B;;AAEA,MAAIY,OAAO,KAAK,WAAhB,EAA6B;AAC3B,UAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAOM,OAAP;AACD,CATD;;IAAMD,Q;;AAWN,SAASJ,aAAT,EAAwBI,QAAxB","sourcesContent":["import React from \"react\";\r\nimport { createContext, useContext, useReducer } from \"react\";\r\n\r\nconst CountContext = createContext();\r\n\r\nconst countReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"increment\": {\r\n      // code here\r\n      return { count: state.count + 1 };\r\n    }\r\n    case \"decrement\": {\r\n      // code here\r\n      return { count: state.count - 1 };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst CountProvider = ({ children }) => {\r\n  // useReducer\r\n  const [state, dispatch] = React.useReducer(countReducer, { count: 0 });\r\n  // Make variable `value` and assign state & dispatch\r\n  const value = { state, dispatch };\r\n\r\n  return <CountContext.Provider value={value}>{children}</CountContext.Provider>;\r\n};\r\n\r\nconst useCount = () => {\r\n  // fill the default value of useContext\r\n  const context = useContext(CountContext);\r\n\r\n  if (context === \"undefined\") {\r\n    throw new Error(\"useCount must be used within a CountProvider\");\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport { CountProvider, useCount };\r\n"]},"metadata":{},"sourceType":"module"}